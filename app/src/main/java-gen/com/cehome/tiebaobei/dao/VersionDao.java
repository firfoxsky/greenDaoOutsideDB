package com.cehome.tiebaobei.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cehome.tiebaobei.dao.Version;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VERSION".
*/
public class VersionDao extends AbstractDao<Version, Void> {

    public static final String TABLENAME = "VERSION";

    /**
     * Properties of entity Version.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DbVersion = new Property(0, Integer.class, "dbVersion", false, "DB_VERSION");
        public final static Property DataVersion = new Property(1, String.class, "dataVersion", false, "DATA_VERSION");
        public final static Property LastUpdateTime = new Property(2, String.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
    };


    public VersionDao(DaoConfig config) {
        super(config);
    }
    
    public VersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VERSION\" (" + //
                "\"DB_VERSION\" INTEGER," + // 0: dbVersion
                "\"DATA_VERSION\" TEXT," + // 1: dataVersion
                "\"LAST_UPDATE_TIME\" TEXT);"); // 2: lastUpdateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VERSION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Version entity) {
        stmt.clearBindings();
 
        Integer dbVersion = entity.getDbVersion();
        if (dbVersion != null) {
            stmt.bindLong(1, dbVersion);
        }
 
        String dataVersion = entity.getDataVersion();
        if (dataVersion != null) {
            stmt.bindString(2, dataVersion);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(3, lastUpdateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Version readEntity(Cursor cursor, int offset) {
        Version entity = new Version( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // dbVersion
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataVersion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // lastUpdateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Version entity, int offset) {
        entity.setDbVersion(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDataVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastUpdateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Version entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Version entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
